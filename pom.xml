<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
    <modelVersion>4.0.0</modelVersion>
    <groupId>com.mobei.maven</groupId>
    <artifactId>maven_base</artifactId>
    <packaging>pom</packaging>
    <version>1.0</version>

    <modules>
        <module>module1</module>
        <module>import_pom</module>
    </modules>

    <properties>
        <maven.compiler.source>8</maven.compiler.source>
        <maven.compiler.target>8</maven.compiler.target>
        <!--统一管理版本号:引用${xxx.version}-->
        <xxx.version>x.x.x</xxx.version>
    </properties>

    <!--管理所有的依赖: 父工程这种方式管理的依赖和插件全部会被子工程依赖-->
    <!--<dependencies>
        <dependency>
            <groupId>org.apache.spark</groupId>
            <artifactId>spark-core_2.12</artifactId>
            <version>3.0.0</version>
        </dependency>
    </dependencies>-->

    <!-- 用这种方式管理的依赖则只有当子工程显示声明了才会依赖,并且子工程只需要声明groupId和artifactId即可,不需要指定版本号和scope(scope也会继承) -->
    <dependencyManagement>
        <dependencies>
            <!--                 scope说明                -->
            <!-- maven有三套classpath: classpath就是项目中用到的各种依赖的类,jvm在运行的时候需要去classpath下面加载对应的类.
                    - 编译源代码的时候有一套classpath
                    - 编译测试代码以及执行测试代码的时候有一套classpath
                    - 运行项目的时候有一套classpath
                依赖范围就是用来控制依赖包与这三种classpath的关系的,不同的依赖范围会导致那个依赖包可能在编译、测试或者打包运行的时候有时候可以使用,有时候不能够使用
            -->

            <dependency>
                <groupId>org.springframework.boot</groupId>
                <artifactId>spring-boot-starter</artifactId>
                <version>2.5.2</version>
                <!-- compile: 默认,对编译、测试和运行的classpath都有效 -->
            </dependency>

            <dependency>
                <groupId>junit</groupId>
                <artifactId>junit</artifactId>
                <version>4.13.2</version>
                <!-- test: 仅仅对于运行测试代码的classpath有效,编译或者运行主代码的时候无效,仅仅测试代码需要用的依赖一般都会设置为这个范围,
                     比如junit、一些测试框架、或者只有在测试代码中才会使用的一些依赖会设置为test.
                     好处在于说打包的时候这种test scope的依是不会放到最终的发布包里去的,减少发布包的体积
                -->
                <scope>test</scope>
            </dependency>

            <dependency>
                <groupId>javax.servlet</groupId>
                <artifactId>javax.servlet-api</artifactId>
                <version>4.0.1</version>
                <!-- provided:编译和测试的时候有效,但是在运行的时候无效,因为可能环境已经提供了.
                     比如servlet-api就是这个范围,在运行的时候,servlet容器会提供依赖.
                     servlet-api是用来开发java web项目的,可能在开发代码和执行单元测试的时候,
                     需要在pom.xml里面声明这个servlet-api的依赖,因为要写代码和测试代码.
                     但是最终打完包之后,放到tomcat容器里面去跑的时候,是不需要将这个servlet-api的依赖包打入发布包中的,
                     因为tomcat容器本身就会提供servlet-api的包
                -->
                <scope>provided</scope>
            </dependency>

            <dependency>
                <groupId>mysql</groupId>
                <artifactId>mysql-connector-java</artifactId>
                <version>8.0.25</version>
                <!-- runtime:测试和运行classpath有效,但是编译代码时无效,比如jdbc的驱动实现类、mysql驱动.
                     因为写代码的时候是基于javax.sql包下的标准接口去写代码的,在测试、实际运行的时候需要用这个包,
                     但是编译的时候只要javax.sql接口就可以了,不需要mysql驱动类.
                     一般我们声明mysql驱动的时候不会设置为runtime,因为开发代码的时候会用到mysql驱动特定的api接口,
                     不仅仅只是用javax.sql(这里仅作为演示设置成了runtime)
                -->
                <scope>runtime</scope>
            </dependency>

            <!--  maven的传递性依赖:  就是说会自动递归解析所有的依赖,然后负责将依赖下载下来,
                  接着所有层级的依赖都会成为我们的项目的依赖
                  传递性依赖机制对依赖范围也是有影响的,比如下面的表格,第一列是一级依赖,第一行是二级依赖,
                  传递性依赖会导致多级依赖的依赖范围交叉在一起,会有影响:
                                          compile	    test	provided	runtime
                            compile	    compile			                runtime
                            test	    test			                test
                            provided	provided		    provided	provided
                            runtime	    runtime			                runtime

                   有可能依赖是不会传递的,就是可能有些多层级的依赖,是不会成为我们项目的依赖的(上面为空的栏就是不依赖)
            -->

            <!-- 依赖调解:  maven会自动解析所有层级的依赖,给我们自动下载所有的依赖,但是可能会出现依赖冲突的问题:
                 比如A->B->C->X(1.0)，A->D->X(2.0),A有两个传递性依赖X,不同的版本,就产生了依赖冲突的问题,maven如何解决呢?
                 依赖调解的机制此时就会依赖调解:
                    - 就近原则:离A最近的选用,就是X的2.0版本
                 如果A->B->X(1.0)和A->D->X(2.0),路径等长呢?
                    - 第一声明原则:哪个依赖在pom.xml里先声明就用哪个

                可选依赖:  <optional>true</optional>,此时依赖传递失效,不会向上传递
                          - 如果A依赖于B, B依赖于C, B对C的依赖是optional,那么A就不会依赖于C.反之如果没有optional,根据传递性依赖机制,A会依赖于C
                          - 比如项目B是一个通用的数据访问平台,可以接es、hbase、redis,有几个依赖,但是这些依赖可能是不可以同时使用的,此时就可以声明为optional不要向上传递,
                            那么如果项目A依赖项目B,此时就需要根据自己的需求,引入es、hbase、redis的依赖,让B可以跑起来.
                            比如说,A就依赖于使用B来访问es,那么A自己引入es的依赖即可,B对es、hbase、redis的依赖是不会自动传递给A的,需要A自己去声明.这个很少很少用
            -->

            <!--                 scope说明                -->
            <!-- https://mvnrepository.com/artifact/org.apache.spark/spark-core -->
            <dependency>
                <groupId>org.apache.spark</groupId>
                <artifactId>spark-core_2.12</artifactId>
                <version>3.0.2</version>
            </dependency>
        </dependencies>
    </dependencyManagement>

    <build>
        <!-- 父工程统一管理插件依赖:子工程声明才会依赖 -->
        <pluginManagement>
            <plugins>
                <plugin>
                    <groupId>org.apache.maven.plugins</groupId>
                    <artifactId>maven-source-plugin</artifactId>
                    <version>3.2.0</version>
                    <!-- 指定执行时机:可以指定多个execution -->
                    <executions>
                        <!-- 往verify phase绑定了一个goal:jar-no-fork
                             这里的意思就是在verify阶段执行以下jar-no-fork这个命令:
                             只要生命周期在verify阶段及以后的命令,都可以在控制台看到执行了该命令
                        -->
                        <execution>
                            <id>attach-sources</id>
                            <phase>verify</phase>
                            <goals>
                                <goal>jar-no-fork</goal>
                            </goals>
                        </execution>
                    </executions>
                    <configuration>
                        <!-- 配置输出目录 -->
                        <outputDirectory>${project.build.outputDirectory}</outputDirectory>
                    </configuration>
                </plugin>
            </plugins>
        </pluginManagement>
    </build>

    <!-- 发布到私服的管理配置 -->
    <distributionManagement>
        <repository>
            <id>nexus-releases</id>
            <name>Nexus Release Repository</name>
            <!-- 私服发布版本仓库的url -->
            <url>http://localhost:8081/repository/maven-releases/</url>
        </repository>
        <snapshotRepository>
            <id>nexus-snapshots</id>
            <name>Nexus Snapshot Repository</name>
            <!-- 私服快照版本仓库的url -->
            <url>http://localhost:8081/repository/maven-snapshots/</url>
        </snapshotRepository>
    </distributionManagement>

</project>